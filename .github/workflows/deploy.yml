name: Build and Release
run-name: Build ${{ github.run_number }} of branch ${{ github.ref_name }} by @${{ github.actor }}

on:    
  workflow_dispatch:
    inputs:
      datatrackerRef:
        description: 'Datatracker API Spec Repo Ref'
        required: true
        type: string
        default: 'feat/rpc-api'
      deploy:
        description: 'Deploy to K8S'
        default: 'Skip'
        required: true
        type: choice
        options:
          - Skip
          - Staging Only
          - Staging + Prod

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -----------------------------------------------------------------
  # BUILD
  # -----------------------------------------------------------------
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      pkg_version: ${{ steps.buildvars.outputs.pkg_version }}

    steps:   
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        fetch-tags: false
        path: red

    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        fetch-tags: false
        repository: ietf-tools/datatracker
        ref: ${{ inputs.datatrackerRef }}
        path: datatracker

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: 22.x

    - name: Generate red-api spec
      working-directory: ./datatracker
      run: |
        cat > doit.bash <<EOF
        echo "Creating and activating virtual environment..."
        python -mvenv venv
        source venv/bin/activate
        echo "Installing requirements..."
        pip install -r requirements.txt
        echo "Generating OpenAPI spec..."
        touch ietf/settings_local.py
        ietf/manage.py spectacular --skip-checks > red-api.yml
        EOF
        docker run --rm --volume .:/workspace ghcr.io/ietf-tools/datatracker-app-base:latest /bin/bash -e doit.bash
        mv red-api.yml ..

    - name: Generate API client
      working-directory: ./
      run: |
        npx apigen-ts ./red-api.yml --inline-enums --parse-dates ./red-client.ts
        mkdir ./red/client/generated
        cp red-client.ts ./red/client/generated/

    - name: Archive red-api client
      uses: actions/upload-artifact@v4
      with:
        name: red-api
        path: |
          red-api.yml
          red-client.ts

    - name: NPM Install + Build Site
      run: |
        npm ci
        npm run build:nuxt
      working-directory: ./red/client

    - name: Set Build Variables
      id: buildvars
      run: |
        echo "pkg_version=latest" >> $GITHUB_OUTPUT

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Image
      uses: docker/build-push-action@v6
      env:
        DOCKER_BUILD_SUMMARY: false
      with:
        context: ./red/
        file: ./red/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/ietf-tools/red:latest

  # -----------------------------------------------------------------
  # STAGING
  # -----------------------------------------------------------------
  staging:
    name: Deploy to Staging
    if: ${{ !failure() && !cancelled() && (inputs.deploy == 'Staging Only' || inputs.deploy == 'Staging + Prod') }}
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: staging
    env:
      PKG_VERSION: ${{needs.build.outputs.pkg_version}}
      
    steps:
      - name: Deploy to staging
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: deploy.yml
          repo: ietf-tools/infra-k8s
          ref: main
          token: ${{ secrets.GH_INFRA_K8S_TOKEN }}
          inputs: '{ "environment":"${{ secrets.GHA_K8S_CLUSTER }}", "app":"red", "appVersion":"${{ env.PKG_VERSION }}", "remoteRef":"${{ github.sha }}" }'
          wait-for-completion: true
          wait-for-completion-timeout: 10m
          wait-for-completion-interval: 30s
          display-workflow-run-url: false
  
  # -----------------------------------------------------------------
  # PROD
  # -----------------------------------------------------------------
  prod:
    name: Deploy to Production
    if: ${{ !failure() && !cancelled() && (inputs.deploy == 'Staging + Prod') }}
    needs: [build, staging]
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      PKG_VERSION: ${{needs.build.outputs.pkg_version}}

    steps:
      - name: Deploy to production
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: deploy.yml
          repo: ietf-tools/infra-k8s
          ref: main
          token: ${{ secrets.GH_INFRA_K8S_TOKEN }}
          inputs: '{ "environment":"${{ secrets.GHA_K8S_CLUSTER }}", "app":"red", "appVersion":"${{ env.PKG_VERSION }}", "remoteRef":"${{ github.sha }}" }'
          wait-for-completion: true
          wait-for-completion-timeout: 10m
          wait-for-completion-interval: 30s
          display-workflow-run-url: false